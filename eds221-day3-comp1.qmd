---
title: "EDS 221 Day 3 Comp Session 1"
format: html
editor: visual
execute: 
  warning: false
---

## Conditional Statements

```{r}
library(tidyverse)
library(palmerpenguins)
```

```{r}
temperature <- 98.2

# if condition isn't met, it returns nothing

if (temperature > 97) {
  print("Temperature warning")
} else 
  print("No temperature warning")
```

Create an if else statement for blue whale lengths. Create a variable blue whale, which has a value of 40 (meters). Add an if else statement that returns "GIANT" if the length exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length is \<= 20.

```{r}

blue_whale <- 40

if (blue_whale > 35) {
  print("GIANT")
} else if (blue_whale > 20 & blue_whale <= 35) {
  print("MEDIUM")
} else if (blue_whale <= 20) {
  print("SMALL")
}
  

```

## Switch statement

```{r}
housing_type <- "whole"

switch(housing_type, 
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100")
       )
# we can also write this as an if else statement
```

```{r}
if (housing_type == "whole") {
  print("1100")
} else if (housing_type == "double") {
  print("750")
} else if (housing_type == "single") {
  print("400")
}
```

## For Loops

```{r}
# first for loop

height <- c(58, 61, 65, 72, 89, 94)

for (i in seq_along(height)) {
  half_height = height[i] / 2
  print(half_height)
}
```

For each value in the height vector, return the sum of the value + the one right after it...

```{r}
for (i in seq_along(height)) {
  added_heights = height[i] + height[i + 1]
  print(added_heights)
}
```

if we don't want NA at the end...

```{r}

for (i in seq(1: (length(height) - 1))) {
  added_heights = height[i] + height[i + 1]
  print(added_heights)
}
```

Write a for loop that calculates the value of height for each element divided by the mean of the entire height vector

```{r}
# mean(height)

for (i in seq_along(height)) {
  mean_height = (height[i] / mean(height))
  print(mean_height)
}
```

## For loop with conditional statement

side note: pseudo code --\> here's what i think the logic would look like

Instructions: try to write a for loop with a conditional (if) statement that returns the means of all NUMERIC variables in the penguins dataset.

-   is.numeric (asks is this thing numeric?)

-   mean(vec, na.rm = TRUE)

```{r}

for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
    penguin_mean <- mean(penguins[[i]], na.rm = TRUE)
    print(penguin_mean)
  }
}

```

note: we'll use where() later

apply(), across(), mutate(), and summarize()

## Functional programming for easier iteration

Use apply() to iterate over rows or columns. MARGIN = 1 (rows) , MARGIN = 2 (columns)

apply(array, margin, fun, ... , simplify)

margin = 1 (rows)

margin = 2 (columns)

fun = function you want to apply to columns

```{r}
apply(X = mtcars, MARGIN = 2, FUN = median)
# same thing, just not explicit
apply(mtcars, 2, median)
```

## dplyr::across()

add group_by() and summarize()

Starter: calculate/find the mean flipper length of penguins by species

under the hood, whatever you apply after group_by, it knows that you want to do that for each group that exists within whatever variable you grouped by

group_by(one variable, another variable if u want!)

```{r}
penguins |> 
  group_by(species, sex, island) |> 
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE)
            )

```

use across() within summarize() to only calculate a mean value for numeric variables/columns

```{r}
penguins |> 
  group_by(species, island) |> 
  summarize(across(where(is.numeric), mean, na.rm = TRUE))
```

across() is super powerful! so is group_by() !! and summarize() !!

## Detecting a string pattern

stringr() package has cool built-in functions

str_detect

```{r}
food <- "I love burritos"

if (str_detect(food, "burritos")) {
  print("Yay, burritos!")
} else {
  print("But what about burritos?")
}
```
